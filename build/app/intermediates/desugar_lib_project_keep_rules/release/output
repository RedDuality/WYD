-keep class java.time.Duration
-keep class java.util.Spliterator
-keep class java.util.stream.Stream
-keep class j$.time.DayOfWeek
-keep class j$.time.Duration {
    j$.time.Duration ofMillis(long);
    long toMillis();
}
-keep class j$.time.Instant {
    j$.time.OffsetDateTime atOffset(j$.time.ZoneOffset);
    long toEpochMilli();
}
-keep class j$.time.LocalDateTime {
    java.lang.String format(j$.time.format.DateTimeFormatter);
    j$.time.LocalDateTime parse(java.lang.CharSequence);
    j$.time.LocalDateTime plusDays(long);
    j$.time.LocalDateTime plusWeeks(long);
}
-keep class j$.time.OffsetDateTime {
    j$.time.LocalDateTime toLocalDateTime();
}
-keep class j$.time.TimeConversions {
    java.time.Duration convert(j$.time.Duration);
    j$.time.Duration convert(java.time.Duration);
}
-keep class j$.time.ZoneId {
    j$.time.ZoneId of(java.lang.String);
}
-keep class j$.time.ZoneOffset {
    j$.time.ZoneOffset UTC;
}
-keep class j$.time.ZonedDateTime {
    int getDayOfMonth();
    j$.time.DayOfWeek getDayOfWeek();
    int getHour();
    int getMinute();
    int getMonthValue();
    int getNano();
    int getSecond();
    int getYear();
    j$.time.ZonedDateTime now(j$.time.ZoneId);
    j$.time.ZonedDateTime of(int, int, int, int, int, int, int, j$.time.ZoneId);
    j$.time.ZonedDateTime of(j$.time.LocalDateTime, j$.time.ZoneId);
    j$.time.ZonedDateTime plusDays(long);
}
-keep class j$.time.chrono.ChronoZonedDateTime {
    boolean isBefore(j$.time.chrono.ChronoZonedDateTime);
    j$.time.Instant toInstant();
}
-keep class j$.time.format.DateTimeFormatter {
    j$.time.format.DateTimeFormatter ISO_LOCAL_DATE;
    j$.time.format.DateTimeFormatter ISO_LOCAL_DATE_TIME;
    java.lang.String format(j$.time.temporal.TemporalAccessor);
}
-keep class j$.time.temporal.TemporalAccessor
-keep class j$.util.DateRetargetClass {
    j$.time.Instant toInstant(java.util.Date);
}
-keep class j$.util.DesugarTimeZone {
    java.util.TimeZone getTimeZone(java.lang.String);
}
-keep class j$.util.Spliterator$Wrapper {
    java.util.Spliterator convert(j$.util.Spliterator);
}
-keep class j$.util.Spliterator
-keep class j$.util.Spliterators {
    j$.util.Spliterator spliterator(java.util.Collection, int);
}
-keep class j$.util.concurrent.ConcurrentHashMap {
    void <init>();
    void <init>(int, float, int);
    boolean containsKey(java.lang.Object);
    java.lang.Object get(java.lang.Object);
    boolean isEmpty();
    java.lang.Object put(java.lang.Object, java.lang.Object);
    java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
    java.lang.Object remove(java.lang.Object);
    boolean remove(java.lang.Object, java.lang.Object);
}
-keep class j$.util.concurrent.ThreadLocalRandom {
    j$.util.concurrent.ThreadLocalRandom current();
}
-keep class j$.util.stream.Stream$VivifiedWrapper {
    j$.util.stream.Stream convert(java.util.stream.Stream);
}
-keep class j$.util.stream.Stream {
    boolean anyMatch(java.util.function.Predicate);
}
